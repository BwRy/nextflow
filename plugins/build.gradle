import io.nextflow.gradle.tasks.PluginsRepositoryPublisher
import io.nextflow.gradle.tasks.PluginsRepositoryIndexer
import io.nextflow.gradle.tasks.S3Upload
import org.apache.commons.codec.digest.DigestUtils

apply plugin: 'java'
apply plugin: "nf-gradle-plugin"

jar.enabled = false

String computeSha512(File file) {
    if( !file.exists() )
        throw new GradleException("Missing file: $file -- cannot compute SHA-512")
    return DigestUtils.sha512Hex(file.bytes)
}

String now() {
    "${java.time.OffsetDateTime.now().format(java.time.format.DateTimeFormatter.ISO_DATE_TIME)}"
}

def timestamp = now()

ext.plugins_s3_url = 's3://www.nextflow.io/plugins'
ext.plugins_http_url = 'http://www.nextflow.io.s3-website-eu-west-1.amazonaws.com/plugins'
ext.plugins_index_url = 'https://raw.githubusercontent.com/nextflow-io/plugins/main/plugins.json'

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'nf-gradle-plugin'
    
    repositories {
        mavenLocal()
        mavenCentral()
    }

    /*
     * Creates plugin zip and json meta file in plugin `build/libs` directory
     */
    task plugin(type: Jar) {
        into('classes') {
            with jar
        }
        into('lib') {
            from configurations.compile
        }
        archiveExtension = 'zip'
        preserveFileTimestamps = false
        reproducibleFileOrder = true

        doLast {
            // create the meta file
            final zip = new File("$buildDir/libs/${project.name}-${project.version}.zip")
            final meta = new File("$buildDir/libs/${project.name}-${project.version}.json")
            meta.text = """\
              {
                "version": "${project.version}",
                "date": "${timestamp}",
                "url": "$plugins_http_url/${project.name}/${project.name}-${project.version}.zip",
                "sha512sum": "${computeSha512(zip)}"
              }
            """.stripIndent()
        }
    }

    task assemblePlugin(type: Copy) {
        from plugin
        into "$buildDir/plugins"
    }

    task targetLibs(type: Sync) {
        from configurations.compile
        into 'build/target/libs'
    }

    task uploadPluginZip(type: S3Upload, dependsOn: plugin) {
        // the provider mess is needed to lazy evaluate the `project.version` property
        //   https://docs.gradle.org/current/userguide/lazy_configuration.html#lazy_properties
        //   https://stackoverflow.com/questions/13198358/how-to-get-project-version-in-custom-gradle-plugin/13198744
        source = providers.provider { "$buildDir/libs/${project.name}-${project.version}.zip" }
        target = providers.provider { "$plugins_s3_url/${project.name}/${project.name}-${project.version}.zip" }
        publicRead = true
    }

    task uploadPluginMeta(type: S3Upload, dependsOn: plugin) {
        source = providers.provider { "$buildDir/libs/${project.name}-${project.version}.json" }
        target = providers.provider { "$plugins_s3_url/${project.name}/${project.name}-${project.version}.json" }
        skipExisting = true
        publicRead = true
    }

    task uploadPlugin(dependsOn: [uploadPluginMeta, uploadPluginZip] ) {
    }
}

task uploadRepositoryIndex(type: PluginsRepositoryIndexer) {
    publishUrl = plugins_s3_url
}

task uploadPlugins(dependsOn: [subprojects.uploadPlugin]) {
}


task assemblePlugins(type: Copy, dependsOn: [subprojects.assemblePlugin, subprojects.targetLibs]) {
}

assemble.dependsOn subprojects.assemblePlugin, subprojects.targetLibs


task publishRepositoryIndex( type: PluginsRepositoryPublisher ) {
    repositoryUrl = plugins_s3_url
    indexUrl = plugins_index_url
    githubUser = 'pditommaso'
    githubEmail = 'paolo.ditommaso@gmail.com'
    githubToken = System.getenv('GITHUB_TOKEN')
}
